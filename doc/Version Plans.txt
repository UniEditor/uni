
=========================================================
Uni shall use plain version number:

mainVersion.subVersion.buildNumber
MainVersion will change only if incompatiblity in extension, project file, or changes important enough happens
SubVersion will change if corresponding mileStone is reached
BuildNumber will change whenever a stable version is released

=========================================================
I have planned serveral mileStones for Uni, each with a subversion name:

<<Milestone 0.0 : Basic [OK]
UI Frame [OK]
Panel System [OK]
Scripting Engine Setup [OK]
ExtensionManager Search Ext and Parse PanelDefines [OK]
Bind Panel with Ext [OK]
Log Panel [OK]
Lib Panel [OK]
Stage Rendering [OK]
	
<<Milestone 0.1 : Object pos editor [OK]

transformation property group [OK]
pro panel for transformation [OK]
exporter system [OK]
a simple export format [OK]
single selection [OK]
gadget should support dragging [OK]

<<Milestone 0.1.1 : Make a scene, export and play in a game engine
UniSprite support render setting (image, shape) {pro group, pro group panel} [OK]
Menu bar: clean up and improve structure [OK]
Project save, load functionality
loader of the format for HaxeFlixel
Panel Resizing
Asset Panel (image, spriteSheet)
Drag the set image path

<<Milestone 0.1.2 : A proper editor, not a haxeui demo 
rendering simple tranformer gadget
gadget should support scaling, rotation
Meter to show performance
Short-cut key system
Restyle the whole UI
Undo, redo (By Menu)

<<MIlestone 0.1.3 : Nested Things
Algs for fast single selection, multi selection
nest structure support for edobj
LayerManager panel support manipulate nest structure

<<MIlestone 0.1.4 : Modern UI stuff

Docking system for panels
Right click system:
Panels
Controls within some panel
Stage System (drag stage, origin point, stage with size)

<<Milestone 0.2 : Finishing UniSprite

custom property for edobj
Curtome type
custom property for custome types




Delayed Feature:
	
Multi-scene file editing
This would require moving data from uni to scene, changes in api to get data
Also about the image caches and stuff

=========================================================
Sample Games (TO DO):
	
A top down shooter - Object, tilemap, shape(as region) --HaxeFlixel

Nodebased Strategy Game - map ----Flambe or just openfl

Digger - bitmap --Flambe or just openfl

Spaceship scroll shooter - super large map as timeline --HaxeFlixel

Blueberry  remake --vecter as environment

Question and answer game - map as answer tree --Some Genre-Specific Tool

Some logic 2D game rendered in 3D - 2D content edit for Unity --Unity
